english = subset(merged, 200 <= merged$impressions & merged$impressions <= 400 & merged$lang=="en")
japanese = subset(merged, 200 <= merged$impressions & merged$impressions <= 400 &  merged$lang=="ja")
japanese[2,]$text
tmp = read.csv("/Users/daigo/tmp.csv", header=TRUE)
tmp
tmp = read.csv("/Users/daigo/projects/stats/twitter/post-time/daigotanaka-tweets-2014.csv", header=TRUE)
tweets = read.csv("/Users/daigo/projects/stats/twitter/post-time/daigotanaka-tweets-2014.csv", header=TRUE)
url = getURL("https://s3-us-west-1.amazonaws.com/daigotanaka-data/tweet-activity-metrics-daigotanaka-2014.csv")
metrics = read.csv(text=url, head=TRUE, fileEncoding="UTF-8", stringsAsFactors=FALSE)
col_names = names(metrics)
col_names[1] = "id"
colnames(metrics) = col_names
metrics = metrics[is.numeric(metrics$impressions) & metrics$impressions > 0 & metrics$id != 513495667927711744,]
merged = merge(x=tweets, y=metrics, by="id", all=F)
merged$date = as.POSIXlt(strptime(as.character(merged$time), "%Y-%m-%d %H:%M %z", tz="UTC"))
english = subset(merged, 200 <= merged$impressions & merged$impressions <= 400 & merged$lang=="en")
japanese = subset(merged, 200 <= merged$impressions & merged$impressions <= 400 &  merged$lang=="ja")
japanese[1,]$text
library(ecdat)
library(Ecdat)
library(airquality)
library(datasets)
airquality
head(airquality)
plot(airquality$Temp, airquality$Ozone)
?airquality
lm(airquality$Ozone ~ airquality$Temp)
lm.air = lm(airquality$Ozone ~ airquality$Temp)
sumary(lm.air)
summary(lm.air)
library(ggplot2)
ozone_temp = ggplot(data=airquality, x=Temp, y=Ozone) + geom_point()
ozone_temp
ozone_temp = ggplot(data=airquality, aes(x=Temp, y=Ozone)) + geom_point()
ozone_temp
ozone_temp = ggplot(data=airquality, aes(x=Temp, y=Ozone)) + geom_point(aes(size=2))
ozone_temp
ozone_temp = ggplot(data=airquality, aes(x=Temp, y=Ozone)) +
guides(fill=FALSE) + geom_point(aes(size=2))
ozone_temp
ozone_temp = ggplot(data=airquality, aes(x=Temp, y=Ozone)) +
+ theme(legend.position="none") + geom_point(aes(size=2))
ozone_temp
ozone_temp = ggplot(data=airquality, aes(x=Temp, y=Ozone))
+ geom_point(aes(size=2))
+ theme(legend.position="none")
ozone_temp
ozone_temp = ggplot(data=airquality, aes(x=Temp, y=Ozone)) +
geom_point(aes(size=2)) +
theme(legend.position="none")
ozone_temp
ozone_temp = ggplot(data=airquality, aes(x=Temp, y=Ozone)) +
geom_point(aes(size=2)) +
xlab("Temperature F") +
ylab("Ozone (ppb)") +
theme(legend.position="none")
ozone_temp
ozone_temp = ggplot(data=airquality, aes(x=Temp, y=Ozone)) +
geom_point(aes(size=2)) +
xlab("Temperature (F)") +
ylab("Ozone (ppb)") +
theme(legend.position="none")
ozone_temp
ozone_temp_wind = ozone_temp + scale_colour_brewer(palette="Blues")
ozone_temp_wind
?scale_color_brewer
ozone_temp_wind = ozone_temp + scale_color_gradient()
ozone_temp_wind
?scale_color_brewer
ozone_temp_wind = ozone_temp + scale_color_gradient(aes(fill=Wind))
ozone_temp_wind
ozone_temp_wind = ozone_temp + scale_color_gradient(aes(color=Wind))
ozone_temp_wind
ozone_temp_wind = ozone_temp + scale_fill_continuous(aes(color=Wind))
ozone_temp_wind
ozone_temp_wind = ozone_temp + scale_fill_continuous(aes(fill=Wind))
ozone_temp_wind
ozone_temp = ggplot(data=airquality, aes(x=Temp, y=Ozone, fill=Wind)) +
geom_point(aes(size=2)) +
xlab("Temperature (F)") +
ylab("Ozone (ppb)") +
theme(legend.position="none")
ozone_temp_wind = ozone_temp + scale_fill_continuous()
ozone_temp_wind
airquality$Wind
miss <- sample(c(NA, 1:5), nrow(mtcars), rep = TRUE)
qplot(mpg, wt, data = mtcars, colour = miss)
qplot(mpg, wt, data = mtcars, colour = miss) +
scale_colour_gradient(na.value = "black")
ozone_temp = ggplot(data=airquality, aes(x=Temp, y=Ozone), color=Wind) +
geom_point(aes(size=2)) +
xlab("Temperature (F)") +
ylab("Ozone (ppb)") +
theme(legend.position="none")
ozone_temp_wind = ozone_temp + scale_fill_continuous()
ozone_temp_wind
ozone_temp = ggplot(data=airquality, aes(x=Temp, y=Ozone), color=Wind) +
geom_point(aes(size=2)) +
xlab("Temperature (F)") +
ylab("Ozone (ppb)") +
theme(legend.position="none")
ozone_temp_wind = ozone_temp + scale_color_gradient()
ozone_temp_wind
miss <- sample(c(NA, 1:5), nrow(mtcars), rep = TRUE)
qplot(mpg, wt, data = mtcars, colour = miss)
qplot(mpg, wt, data = mtcars, colour = miss) +
scale_colour_gradient(na.value = "black")
miss <- sample(c(NA, 1:5), nrow(mtcars), rep = TRUE)
qplot(mpg, wt, data = mtcars, colour = miss)
qplot(mpg, wt, data = mtcars, colour = miss) +
scale_colour_gradient()
mixx
miss
ozone_temp = qplot(data=airquality, x=Temp, y=Ozone, color=Wind) +
geom_point(aes(size=2)) +
xlab("Temperature (F)") +
ylab("Ozone (ppb)") +
theme(legend.position="none")
ozone_temp
ozone_temp = qplot(data=airquality, x=Temp, y=Ozone) +
geom_point(aes(size=2)) +
xlab("Temperature (F)") +
ylab("Ozone (ppb)") +
theme(legend.position="none")
ozone_temp
ozone_temp_wind = qplot(data=airquality, x=Temp, y=Ozone, color=Wind) +
geom_point(aes(size=2)) +
xlab("Temperature (F)") +
ylab("Ozone (ppb)") +
theme(legend.position="none") +
scale_color_gradient()
ozone_temp_wind
ozone_temp_wind = qplot(data=airquality, x=Temp, y=Ozone, color=Wind) +
geom_point(aes(size=2)) +
xlab("Temperature (F)") +
ylab("Ozone (ppb)") +
scale_color_gradient()
ozone_temp_wind
ozone_temp_wind = qplot(data=airquality, x=Temp, y=Ozone, color=Wind) +
geom_point(size=2) +
xlab("Temperature (F)") +
ylab("Ozone (ppb)") +
scale_color_gradient()
ozone_temp_wind
ozone_temp_wind = qplot(data=airquality, x=Temp, y=Ozone, color=Wind) +
geom_point(aes(size=2) +
xlab("Temperature (F)") +
ylab("Ozone (ppb)") +
scale_color_gradient()
ozone_temp_wind
ozone_temp_wind = qplot(data=airquality, x=Temp, y=Ozone, color=Wind) +
geom_point(aes(size=2) +
xlab("Temperature (F)") +
ylab("Ozone (ppb)") +
scale_color_gradient()
ozone_temp_wind
ozone_temp_wind = qplot(data=airquality, x=Temp, y=Ozone, color=Wind) +
geom_point(aes(size=2)) +
xlab("Temperature (F)") +
ylab("Ozone (ppb)") +
scale_color_gradient()
ozone_temp_wind
ozone_temp_wind = qplot(data=airquality, x=Temp, y=Ozone, color=Wind) +
geom_point(aes(size=2)) +
xlab("Temperature (F)") +
ylab("Ozone (ppb)") +
scale_color_gradient() +
guides(size=FALSE)
ozone_temp_wind
ozone_temp_wind = qplot(data=airquality, x=Temp, y=Ozone, color=Wind) +
geom_point(aes(size=3)) +
xlab("Temperature (F)") +
ylab("Ozone (ppb)") +
scale_color_gradient() +
guides(size=FALSE)
ozone_temp_wind
ozone_temp_wind = qplot(data=airquality, x=Temp, y=Ozone, color=Wind) +
geom_point(aes(size=5)) +
xlab("Temperature (F)") +
ylab("Ozone (ppb)") +
scale_color_gradient() +
guides(size=FALSE)
ozone_temp_wind
library(dataset)
library(datasets)
airquality
head(airquality)
library(knit2html)
library(knitr)
pts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE, comment=NA,
results="asis", tidy=FALSE, cache=TRUE)
opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE, comment=NA,
results="asis", tidy=FALSE, cache=TRUE)
?scale_color_gradient
class(airquality)
head(airquality)
get_values = function(date, y, z=NULL, name=NULL){
values = paste("{ x:", x, ", y:", y)
if (!is.null(z)) {
values = paste(values, ", z:", z)
}
if (!is.null(name)) {
values = paste(values, ", name:'", gsub('"', "", gsub("'", "", name)), "'")
}
values = paste(values, "}")
return(values)
}
ozone_values = get_values(airqualty$Temp, airquality$Ozone, airquality$Wind,
airquality$date)
get_values = function(x, y, z=NULL, name=NULL){
values = paste("{ x:", x, ", y:", y)
if (!is.null(z)) {
values = paste(values, ", z:", z)
}
if (!is.null(name)) {
values = paste(values, ", name:'", gsub('"', "", gsub("'", "", name)), "'")
}
values = paste(values, "}")
return(values)
}
ozone_values = get_values(airqualty$Temp, airquality$Ozone, airquality$Wind,
airquality$date)
library(datasets)
get_values = function(x, y, z=NULL, name=NULL){
values = paste("{ x:", x, ", y:", y)
if (!is.null(z)) {
values = paste(values, ", z:", z)
}
if (!is.null(name)) {
values = paste(values, ", name:'", gsub('"', "", gsub("'", "", name)), "'")
}
values = paste(values, "}")
return(values)
}
ozone_values = get_values(airqualty$Temp, airquality$Ozone, airquality$Wind,
airquality$date)
ozone_values = get_values(airquality$Temp, airquality$Ozone, airquality$Wind,
airquality$date)
ozone_values
ozone_chart <- Highcharts$new()
ozone_chart$chart(type = "scatter")
ozone_chart$xAxis(title="Temperature (F)")
ozone_chart$yAxis(title="Ozone (ppb)", gridLineColor="#FFFFFF")
ozone_chart$series(name="Ozone", data=ozone_values)
ozone_chart$tooltip(pointFormat=get_point_format(y="Ozone", z="Wind"))
ozone_chart <- Highcharts$new()
# Load caption helper
code = getURL("https://gist.githubusercontent.com/daigotanaka/17930c2ff891e05a83f5/raw/dc04b9ca4068d6464cbec61ada4e82fcf3318e55/rmd_caption_helper.R")
eval(parse(text=code))
# Load rChart helper
code = getURL("https://gist.githubusercontent.com/daigotanaka/63911907d6ceebe54a74/raw/c01a28bcfff2a766338d6f41c906ec62505eecef/rchart-helper.R")
eval(parse(text=code))
# Load caption helper
code = getURL("https://gist.githubusercontent.com/daigotanaka/17930c2ff891e05a83f5/raw/dc04b9ca4068d6464cbec61ada4e82fcf3318e55/rmd_caption_helper.R")
eval(parse(text=code))
# Load rChart helper
code = getURL("https://gist.githubusercontent.com/daigotanaka/63911907d6ceebe54a74/raw/c01a28bcfff2a766338d6f41c906ec62505eecef/rchart-helper.R")
eval(parse(text=code))
library(RCurl)
library(rCharts)
library(ggplot2)
# Load caption helper
code = getURL("https://gist.githubusercontent.com/daigotanaka/17930c2ff891e05a83f5/raw/dc04b9ca4068d6464cbec61ada4e82fcf3318e55/rmd_caption_helper.R")
eval(parse(text=code))
# Load rChart helper
code = getURL("https://gist.githubusercontent.com/daigotanaka/63911907d6ceebe54a74/raw/c01a28bcfff2a766338d6f41c906ec62505eecef/rchart-helper.R")
eval(parse(text=code))
ozone_chart <- Highcharts$new()
ozone_chart$chart(type = "scatter")
ozone_chart$xAxis(title="Temperature (F)")
ozone_chart$yAxis(title="Ozone (ppb)", gridLineColor="#FFFFFF")
ozone_chart$series(name="Ozone", data=ozone_values)
ozone_chart$tooltip(pointFormat=get_point_format(y="Ozone", z="Wind"))
renderChart(ozone_chart, chartId="ozone", include_assets = TRUE, cdn = TRUE)
airquality = airquality[!is.na(airquality$Ozone),]
DAte
Date
date
?date
date
date()
c(1, 2)
m = c(1, 2)
d = c(3, 4)
paste(m, d)
a = paste(m, d)
a
a[2]
a[1]
airquality$date = paste(airquality$Month, airquality$Day)
airquality$date
?airquality
airquality$date = paste(airquality$Month, "/", airquality$Day, "/1973")
?airquality
airquality$date
airquality$date
airquality$date = paste(airquality$Month, "/", airquality$Day, "/1973", sep="")
airquality$date
?scale_color_gradient
strtoi("#132b43")
strtoi("132b43")
strtoi("0x132b43")
get_gradient_color = function(value, min, max, low="0x132B43", high="0x56B1F7"){
p = value / (max - min)
col_range = strtoi(high) - strtoi(low)
dec = as.integer(col_range * p + strtoi(low))
return sprintf("%x", dec)
}
get_gradient_color = function(value, min, max, low="0x132B43", high="0x56B1F7")
{
p = value / (max - min)
col_range = strtoi(high) - strtoi(low)
dec = as.integer(col_range * p + strtoi(low))
return (sprintf("%x", dec))
}
get_gradient_color(0.5, 0, 1)
get_gradient_color = function(value, min, max, low="0x132B43", high="0x56B1F7")
{
p = value / (max - min)
col_range = strtoi(high) - strtoi(low)
dec = as.integer(col_range * p + strtoi(low))
return (paste("#", sprintf("%x", dec), sep="")
}
get_gradient_color = function(value, min, max, low="0x132B43", high="0x56B1F7")
{
p = value / (max - min)
col_range = strtoi(high) - strtoi(low)
dec = as.integer(col_range * p + strtoi(low))
return (paste("#", sprintf("%x", dec), sep=""))
}
get_gradient_color(0.5, 0, 1)
get_gradient_color = function(value, min, max, low="0x132B43", high="0x56B1F7")
{
low = sub("#", "0x", low)
high = sub("#", "0x", high)
p = value / (max - min)
col_range = strtoi(high) - strtoi(low)
dec = as.integer(col_range * p + strtoi(low))
return (paste("#", sprintf("%x", dec), sep=""))
}
get_gradient_color(0.5, 0, 1)
get_gradient_color(airquality$Wind, min(airquality$Wind), max(airquality$Wind))
airquality$date = paste(airquality$Month, "/", airquality$Day, "/1973", sep="")
colors = get_gradient_color(airquality$Wind, min(airquality$Wind),
max(airquality$Wind))
ozone_values = get_values(airquality$Temp, airquality$Ozone, airquality$Wind,
airquality$date, colors)
get_values = function(x, y, z=NULL, name=NULL, color=NULL){
values = paste("{ x:", x, ", y:", y)
if (!is.null(z)) {
values = paste(values, ", z:", z)
}
if (!is.null(name)) {
values = paste(values, ", name:'", gsub('"', "", gsub("'", "", name)), "'")
}
if (!is.null(color)) {
values = paste(values, ", marker: { fillColor: '", color, "'}")
}
values = paste(values, "}")
return(values)
}
airquality$date, colors)
ozone_values = get_values(airquality$Temp, airquality$Ozone, airquality$Wind,
airquality$date, colors)
ozone_values
get_values = function(x, y, z=NULL, name=NULL, color=NULL){
values = paste("{ x:", x, ", y:", y, sep="")
if (!is.null(z)) {
values = paste(values, ", z:", z, sep="")
}
if (!is.null(name)) {
values = paste(values, ", name:'", gsub('"', "", gsub("'", "", name)),
"'", sep="")
}
if (!is.null(color)) {
values = paste(values, ", marker: { fillColor: '", color, "'}", sep="")
}
values = paste(values, "}", sep="")
return(values)
}
airquality$date = paste(airquality$Month, "/", airquality$Day, "/1973", sep="")
colors = get_gradient_color(airquality$Wind, min(airquality$Wind),
max(airquality$Wind))
ozone_values = get_values(airquality$Temp, airquality$Ozone, airquality$Wind,
airquality$date, colors)
ozone_values
?scale_color_brewer
?scale_color_gradient
colorRampPalette
colorRampPalette(1)
colorRampPalette()(1)
a = colorRampPalette()
a = colorRampPalette(c("#132B43", "#56B1F7"))
a(1)
a(10)
color_map = colorFunc(max(airquality$Wind) - min(airquality$Wind))
colorFunc = colorRampPalette(c("#132B43", "#56B1F7"))
color_map = colorFunc(max(airquality$Wind) - min(airquality$Wind))
color_map
colorFunc = colorRampPalette(c("#132B43", "#56B1F7"))
color_map = colorFunc(as.integer(max(airquality$Wind) - min(airquality$Wind)))
colors = c(color_map[as.integer(airquality$Wind - min(airquality$Wind))])
colors
renderFootNotes = function(footnotes) {
writeLines('<div class="footnotes"><ol>')
items = paste('<li id="', footnotes$label, '">', foonotes$content, '</li>')
writeLines(items)
writeLines( = )'</ol></div>')
}
renderFootNotes = function(footnotes) {
writeLines('<div class="footnotes"><ol>')
items = paste('<li id="', footnotes$label, '">', foonotes$content, '</li>')
writeLines(items)
writeLines('</ol></div>')
}
footnotes = data.frame()
footnotes$label = c("airquality")
footnote_lables = c("airquality")
footnote_contents = c("New York Air Quality Measurements. For health effects of http://www.epa.gov/groundlevelozone/health.html")
footnotes = data.frame(label=footnote_labels, content=footnote_contents)
footnote_labels = c("airquality")
footnote_contents = c("New York Air Quality Measurements. For health effects of http://www.epa.gov/groundlevelozone/health.html")
footnotes = data.frame(label=footnote_labels, content=footnote_contents)
renderFootNotes = function(footnotes) {
writeLines('<div class="footnotes"><ol>')
items = paste('<li id="', footnotes$label, '">', foonotes$content, '</li>')
writeLines(items)
writeLines('</ol></div>')
}
renderFootNotes(footnotes)
renderFootNotes = function(footnotes) {
writeLines('<div class="footnotes"><ol>')
items = paste('<li id="', footnotes$label, '">', footnotes$content, '</li>')
writeLines(items)
writeLines('</ol></div>')
}
renderFootNotes(footnotes)
renderFootNotes = function(footnotes) {
writeLines('<div class="footnotes"><ol>')
items = paste('<li id="', footnotes$label, '">', footnotes$content, '</li>'
sep="")
writeLines(items, sep="")
writeLines('</ol></div>', sep="")
}
renderFootNotes = function(footnotes) {
writeLines('<div class="footnotes"><ol>')
items = paste('<li id="', footnotes$label, '">', footnotes$content, '</li>'
sep="")
writeLines(items)
writeLines('</ol></div>')
}
renderFootNotes = function(footnotes) {
writeLines('<div class="footnotes"><ol>')
items = paste('<li id="', footnotes$label, '">', footnotes$content, '</li>',
sep="")
writeLines(items)
writeLines('</ol></div>')
}
renderFootNotes(footnotes)
foot = function(label) {
return(paste('<a href="#', label, '">', footnote_count, '</a>', sep=""))
}
foot("test")
foot = function(label) {
footnote_count = 1
return(paste('<a href="#', label, '">', footnote_count, '</a>', sep=""))
}
foot("test")
foot = function(label) {
footnote_count = 1
writeLines(paste('<a href="#', label, '">', footnote_count, '</a>', sep=""))
}
foot = function(label) {
footnote_count = 1
writeLines(paste('<a href="#', label, '">', footnote_count, '</a>', sep=""))
}
foot("test")
footnote("airquality")
footnote = function(label) {
writeLines(paste('<a href="#', label, '"><sup>', label, '</sup></a>', sep=""))
}
footnote("airquality")
renderFootNotes = function(footnotes) {
writeLines('<div class="footnotes"><ol>')
items = paste('<li id="', footnotes$label, '">', footnotes$content,
'<a href="#', footnotes$label,'_back">^</a>', '</li>', sep="")
writeLines(items)
writeLines('</ol></div>')
}
renderFootNotes(footnotes)
?datasets
library(AppliedPredictiveModeling)
library(kernlab)
install.packages("kernlab")
install.packages("carret")
install.packages("caret")
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(ISLR)
install.packages("ISLR")
library(splines)
library(slidify)
slidify("index.Rmd")
setwd("/Users/daigo/projects/stats/data-product/shiny_twitter_chart_presentation/index.Rmd")
setwd("/Users/daigo/projects/stats/data-product/shiny_twitter_chart_presentation")
slidify("index.Rmd")
publish(title = 'My Tweets in 2014 - Interactive visualization of impressions and engagements', 'index.html', host = 'rpubs')
publish(user="daigotanaka", repo="data-products-course-project")
getwd()
publish(user="daigotanaka", repo="data-products-course-project")
publish(user="daigotanaka", repo="data-products-course-project")
publish(title = 'My Tweets in 2014 - Interactive visualization of impressions and engagements', 'index.html', host = 'rpubs')
